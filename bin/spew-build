#!/bin/bash

GREP_OPTIONS=

set -e

self=$(dirname $(readlink -f $0))

targetdirs=${SPEW_TARGETS:-$self/targets /home/$USER/.spew/targets ./targets}
builddir=$(realpath ${BUILDDIR:-~/.spew/builds})
targets=

for targetdir in $targetdirs; do
	targetdir=$(readlink -f "$targetdir" || echo "$targetdir" )

	[ ! -e "$targetdir" ] && continue

	for target in $(find -L "$targetdir" -name build.sh); do
		name=$(basename $(dirname $(dirname "$target")))
		buf="$name#$(dirname $(dirname $target))"
		echo $targets | grep -q $buf || targets="$buf $targets"
	done
done

targets=$(echo $targets | sort -u)


expand_target() {
	echo lol: $1
	local target=$(echo $1 | awk -F/ '{print $1}')
	local vsn=$(echo $1 | awk -F/ '{print $2}')
	local ref=$(echo $1 | awk -F/ '{print $3}')
	local build=$(echo $1 | awk -F/ '{print $4}')

		echo "target: $target" >&2
		echo "vsn: $vsn" >&2
		echo "ref: $ref" >&2
		echo "build: $build" >&2

	[ ! -d "$builddir/$target" ] && return 1
	( [ -z "$vsn" ] || [ ! -d "$builddir/$target/$vsn" ] ) && return 2
	path=$(realpath "$builddir/$target/$vsn/$ref"*/)
	[ ! -d "$path" ] && return 3
	subpath=$(realpath "$path/$build"*.tar.gz)
	[ ! -e "$subpath" ] && { echo "$subpath"; return 4; }
	echo "$path/$(basename -s .tar.gz "$subpath")"
}

cmd="$1"
shift
case "$cmd" in
	"list-targets")
		for target in $targets; do
			name=$(echo $target | awk -F'#' '{print $1}')
			path=$(echo $target | awk -F'#' '{print $2}')
			vsns=$(echo $(ls "$path") | sed 's/ /, /g')
			printf "%-20s %-50s (%s)\r\n" "$name" $(echo $path | head -c 50) "$vsns"
		done
		;;

	"list-builds")
		# May god have mercy on your soul for reading this as you must
		# really hate the guy who wrote me
		target=$(echo $1 | awk -F/ '{print $1}')
		vsn=$(echo $1 | awk -F/ '{print $2}')
		ref=$(echo $1 | awk -F/ '{print $3}')

		[ ! -z "$name" ] && [ ! -d "$builddir/$target" ] && { echo "error: no such target: $target" >&2; exit 1; }
		[ ! -z "$vsn" ] && [ ! -d "$builddir/$target/$vsn" ] && { echo "error: no such vsn '$vsn' for $target" >&2; exit 1; }

		if [ ! -z "$ref" ]; then
			ref=$(basename $builddir/$target/$vsn/$ref*)
		fi

		if [ -z "$name" ]; then
			echo    "All Builds:"
			echo -e "-----------\n"
			for target in $(ls "$builddir"); do
				echo "$target"
				for vsn in $(ls -r "$builddir/$target"); do
					for ref in $(ls "$builddir/$target/$vsn"); do
						builds=
						for build in $(cd $builddir/$target/$vsn/$ref; find -name '*.tar.gz'); do
							builds="$(echo $build | sed 's#./##;s#\.tar\.gz##' | head -c 6) $builds"
						done
						echo -e "\t$vsn/$(echo $ref | head -c 6) -> $builds"
					done
				done
				echo
			done
		elif [ -z "$vsn" ]; then
			# specific target
			echo "Builds for $1"
			for vsn in $(ls -r "$builddir/$target"); do
				for ref in $(ls "$builddir/$target/$vsn"); do
					echo -e "\t$vsn/$(echo $ref | head -c 6)"
				done
			done
		elif [ -z "$ref" ]; then
			# specific vsn
			echo "Builds for $name/$vsn"
			for ref in $(ls "$builddir/$target/$vsn"); do
				builds=
				for build in $(cd $builddir/$target/$vsn/$ref; find -name '*.tar.gz'); do
					builds="$(echo $build | sed 's#./##;s#\.tar\.gz##' | head -c 6) $builds"
				done
				echo -e "\t$vsn/$(echo $ref | head -c 6) -> $builds"
			done
		else
			# specific cfg ref
			echo "Builds for $target/$vsn/$ref"
			for f in $builddir/$target/$vsn/$ref/*; do
				echo $f | grep -Pq '.tar.gz$' || continue
				echo -e "\t$(basename -s .tar.gz "$f" | head -c 6)"
			done
		fi
		;;

	"build")
		name=$(echo $1 | awk -F'/' '{print $1}')
		vsn=$(echo $1 | awk -F'/' '{print $2}')

		shift || true

		if [ -z "$name" ] || [ -z "$vsn" ]; then
			echo "usage: $0 build <target>/<vsn>" >&2
			exit 2
		fi


		path=$(echo $targets | grep -o "${name}#[^ ]*" | awk -F'#' '{print $2}')

		srcdir="$path/$vsn"

		buildscript="$srcdir/build.sh"
		if [ ! -e "$buildscript" ]; then
			echo "error: build.sh in $path/$vsn was not found or is not executable" >&2
			exit 2
		fi

		buildid=$(shasum $(find $srcdir -type f -or -type l) | shasum | awk '{print $1}' | head -c 6)
		distdir=$builddir/$name/$vsn/$buildid

		if [ -d "$distdir" ] && [ "-f" != "$2" ]; then
			echo "ERROR: build exists $name/$vsn#$buildid... use -f to overwrite" >&2
			exit 2
		fi

		buildtarget=$(mktemp -d)

		env="SRCDIR=$srcdir \
			http_proxy=$http_proxy \
			BUILDDIR=$buildtarget \
			PATH=/bin:/sbin/:/usr/bin:/usr/sbin:/usr/bin/core_perl/shasum"

		echo "=> Running $buildscript"
		env -i $env "$buildscript" $@

		if [ 0 = $? ]; then
			if [ -d "$srcdir/files" ]; then
				sudo rsync -avh $srcdir/files/ $buildtarget/
			fi

			archive=$(mktemp -u)
			cd $buildtarget
			sudo tar -cf $archive .

			buildref=$name_$vsn_$(shasum $archive | awk '{print $1}' | head -c 6).tar.gz
			echo "=> Build $name/$vsn:$buildref in $buildtarget"
			if [ -d "$distdir/$buildref" ]; then
				echo "info: build $name/$vsn#$buildid/$buildref exists, delete it first to rebuild" >&2
				sudo rm $archive
				exit
			else
				echo "=> Copying $buildtarget -> $distdir/$buildref"
				mkdir -p $distdir
				cp $archive $distdir/$buildref
				sudo rm $archive
				echo "=> Build was successfull"
				exit
			fi
		else
			echo "=> Build failed..."
		fi
		rm -rf "$buildtarget"
		;;

	"delete-build")
		for build in $@; do
			echo "=> Deleting build"
			rm -rf $builddir/$build
		done
		;;

	"run")
		name=$1
		target=$2
		shift 2
		opts="$@"

		[ -z "$name" ] || [ -z "$target" ] && { echo "usage: $0 run <name> <target>/<vsn>" >&2; exit 2; }

		path="$builddir/$target"
		if [ ! -d "$path" ]; then
			echo "error: no builds found for $target ($path)" >&2
			exit 3
		fi

		if [ $(find $path -type f | wc -l) -gt 1 ]; then
			echo "error: multiple builds found... be specific..." >&2
			echo "builds: $(echo $(ls $path))" >&2

			exit 3
		fi

		archive=$(find $path -type f)
		rundir=/tmp/spew-app-$(basename -s .tar.gz $archive)

		echo "=> Extracting $archive to $rundir"
		mkdir -p $rundir
		sudo tar -xf $archive -C $rundir

		if [ ! -x "$rundir/run.sh" ] && [ -z "$opts" ] ; then
			echo "warning: $target/run.sh does not exist or not executable" >&2
			systemd-nspawn \
					-M "$name" \
					-D "$rundir" \
					--link-journal=try-guest \
					--network-bridge br0 \
					--network-veth \
					${opts:---boot }
		else
			systemd-nspawn \
					-M "$name" \
					-D "$rundir" \
					--link-journal=try-guest \
					--network-bridge br0 \
					--network-veth \
					$opts
		fi
		;;

	*)
		echo "usage: $0 list-targets|list-builds|build|delete-build [args]" >&2;
		exit 1
esac
